{describe, it, expect, to_equal} = import '@fink/jest/test.fnk'

{map} = import './iter.fnk'
{matches, match_all, find_index, split, replace_all, replace, rx, is_rx, rx_to_str} = import './regex.fnk'


describe rx, fn:
  it 'matches single', fn:
    expect
      matches 'foobar', rx'.+oo.+'
      to_equal
        true

    expect
      matches 'foobar', rx'ni'
      to_equal
        false


  it 'matches multiple', fn:
    [...matches] = pipe match_all 'foobar, spam, ham', rx'(?<=\s).+?am':
      map fn [m]: m

    expect
      matches
      to_equal
        ['spam', 'ham']


  it 'searches', fn:
    expect
      find_index 'foobar, spam, ham', rx'(?<=\s).+?am'
      to_equal 8


  it 'splits', fn:
    expect
      split 'foobar, spam , ham', rx'\s*,\s*'
      to_equal
        ['foobar', 'spam', 'ham']


  it 'replaces all', fn:
    expect
      replace_all 'foobar, spam, ham, ni', rx',.+?am', ''
      to_equal 'foobar, ni'


  it 'replaces single', fn:
    expect
      replace 'foobar, spam, ham, ni', rx',.+?am', ''
      to_equal 'foobar, ham, ni'



describe 'rx expressions', fn:
  it 'creates a regex', fn:
    expect
      rx'\(.+?\)(foo{${1},${4}})'
      to_equal rx'\(.+?\)(foo{1,4})'


  it 'handles multiline commented regex', fn:
    expect
      rx'
        (?<year>\d{4})-   # year part of a date
        (?<month>\d{2})-  # month part of a date
        (?<day>\d{2})     # day part of a date
      '
      to_equal rx'(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})'


  it 'handles escaping', fn:
    expect
      rx_to_str rx'
        \'\"`
        foo \# bar
        \${2}
        \\*
      '
      to_equal '\'"`foo # bar\\\${2}\\\\*'


  it 'handles spaces', fn:
    expect
      rx_to_str rx'[ ]{3}'
      to_equal '[ ]{3}'


  it 'handles nesting', fn:
    expect
      rx_to_str rx'^.+?${ rx'foo.+' }$'
      to_equal '^.+?foo.+$'



describe is_rx, fn:
  it 'asserts if value is regex', fn:
    expect
      is_rx rx'foo'
      to_equal true

    expect
      is_rx '/foo/'
      to_equal false

