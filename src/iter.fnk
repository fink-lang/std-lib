{max_int} = import './num'

# TODO add:
# partition
# product
# compress
# permutations

repeat = unfold item:
  item


count = fn start, step=1:
  pipe start:
    unfold value:
      (value, value + step)


enumerate = fn iterable, start=0, step=1:
  pipe iterable:
    map item, cntr=start:
      ([cntr, item], cntr + step)


chain = fn ...iterables:
  pipe iterables:
    map iterable:
      ...iterable


insert_at = fn idx, insert_items: fn items:
  pipe items:
    map item, curr=0:
      all = match curr:
        idx: chain insert_items, [item]
        else: [item]

      (...all, curr + 1)


cycle = fn iterable:
  pipe [...iterable]:
    unfold items:
      (...items, items)


flatten = map items: ...items


for_each = fn func: fold item, cntr=0:
  func item
  cntr + 1


reverse = fn iterable:
  [...iterable].reverse()


sort = fn compare: fn iterable:
  [...iterable].sort compare


unique = fn iterable: new Set iterable



drop = fn num_items: fn items:
  pipe items:
    map item, idx=0: ([item, idx], idx + 1)
    # TODO: should loxia add an accu to filter?
    filter [, idx]: idx >= num_items
    map [item]: item


take = fn num_items: fn items:
  iter = items.(Symbol.iterator)()
  pipe count 0:
    while ctr: ctr < num_items
    map _: iter.next()
    while {done}: done == false
    map {value}: value


slice = fn start, end=max_int: fn items:
  match start:
    ? + end < 0:
      # TODO: use a sliding buffer while iterating over items
      [...items].slice start, end

    else:
      pipe items:
        drop start
        take end - start


_next_values = fn iters:
  pipe iters:
    # TODO should we stop getting next item if any are done?
    map iter:
      {value, done} = iter.next()
      ...match done:
        true: []
        else: [value]


zip = fn ...iterables:
  [...iters] = pipe iterables:
    map iterable: iterable.(Symbol.iterator)()

  {length: min_len} = iters

  pipe:
    unfold:
      [..._next_values iters]

    while {length}:
      length == min_len



length = fn iterable:
  match iterable:
    {length: {}}: iterable.length
    {size: {}}: iterable.size
    {(Symbol.iterator): {}}: [...iterable].length
    else: -1


# TODO: should this live in str?
# TODO: should it be fn iterable, sep?
join = fn sep: fn iterable:
  [...iterable].join sep
