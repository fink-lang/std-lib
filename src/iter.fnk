{max_int} = import './num'
{new} = import '@fink/js-interop/reflect'
{Symbol, Set} = import '@fink/js-interop/globals'

# TODO add:
# partition
# product
# combinations
# permutations
# find_index


repeat = unfold item:
  item



count = fn start, step=1:
  pipe start:
    unfold value:
      (value, value + step)



enumerate = fn iterable, start=0, step=1:
  pipe iterable:
    map item, cntr=start:
      ([cntr, item], cntr + step)



chain = fn ...iterables:
  pipe iterables:
    map iterable:
      ...iterable



insert_at = fn idx, insert_items: fn items:
  ignore = {}

  pipe items:
    chain ?, [ignore]

    map item, curr=0:
      all = match curr:
        idx: chain insert_items, [item]
        else: [item]

      (...all, curr + 1)

    filter item:
      item != ignore



cycle = fn iterable:
  pipe [...iterable]:
    unfold items:
      (...items, items)



flatten = map items: ...items



reverse = fn iterable:
  [...iterable].reverse _



sort = fn compare: fn iterable:
  [...iterable].sort compare



unique = fn iterable: new Set, iterable



drop = fn num_items: fn items:
  pipe items:
    filter , idx=0:
      (idx >= num_items, idx + 1)



take = fn num_items: fn items:
  match num_items:
    0:
      []
    else:
      pipe items:
        until , ctr=1:
          (ctr >= num_items, ctr + 1)



slice = fn start, end=max_int: fn items:
  match start:
    ? + end < 0:
      # TODO: use a sliding buffer while iterating over items
      [...items].slice start, end

    else:
      pipe items:
        drop start
        take end - start



find_index = fn item_to_find: fn iterable:
  # TODO [...iterable].findIndex item

  [, idx] = pipe iterable:
    map item, idx=0:
      ([item, idx], idx + 1)

    chain ?, [[item_to_find, -1]]

    find [item]:
      item == item_to_find

  idx



_next_values = fn iters:
  pipe iters:
    # TODO should we stop getting next item if any are done?
    map iter:
      {value, done} = iter.next _
      ...match done:
        true: []
        else: [value]



zip = fn ...iterables:
  [...iters] = pipe iterables:
    map iterable: iterable.(Symbol.iterator) _

  {length: min_len} = iters

  pipe:
    unfold:
      [..._next_values iters]

    while {length}:
      length == min_len



length = fn iterable:
  match iterable:
    {length: {}}: iterable.length
    {size: {}}: iterable.size
    {(Symbol.iterator): {}}: [...iterable].length
    else: -1



is_empty = 0 == length ?



# TODO: should this live in str?
# TODO: should it be fn iterable, sep?
join = fn sep: fn iterable:
  [...iterable].join sep



compress = fn iterable, selectors:
  pipe zip iterable, selectors:
    filter [, selected]: selected
    map [item]: item
