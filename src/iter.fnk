# TODO: should all js-interop imports be virtual imports from e.g. @fink/runtime/*
# and have the compiler translate it to the appropriate runtime module
{_iterable_, _iter_, _next_, _is_done_, _is_empty_, _empty_iter_} = import '@fink/js-interop/runtime.js'
{_len_, _join_, _reverse_, _sort_, _zip_} = import '@fink/js-interop/runtime.js'

{max_int} = import './num.fnk'
{is_fn} = import './fn.fnk'


iter = _iter_
next = _next_

is_empty = _is_empty_
length = _len_

zip = _zip_
reverse = _reverse_
join = _join_
sort = _sort_



fold = fn initial, fold_fn:
  foldr = fn iterable, prev, ctx, fold_fn:
    [item, rest, next_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: prev
      else:
        result = fold_fn item, prev, , next_ctx
        foldr rest, result, next_ctx, fold_fn

  fn items:
    it = _iter_ items
    match true:
      is_fn fold_fn:
        foldr it, initial, _, fold_fn
      else:
        foldr it, _, _, initial


fold_ac = fn initial, ctx, fold_fn:
  foldr = fn iterable, prev, acc, ctx, fold_fn:
    [item, rest, f_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [prev, f_ctx]
      else:
        [result, next_acc, next_ctx] = fold_fn item, prev, acc, f_ctx
        foldr rest, result, next_acc, next_ctx, fold_fn

  fn items:
    it = _iter_ items
    uses_ctx = is_fn fold_fn

    acc_ctx_fold_fn = match true:
      is_fn fold_fn: [ , ctx, fold_fn]
      else: [ , , ctx]

    [result, next_ctx] = foldr it, initial, ...acc_ctx_fold_fn
    match true:
      uses_ctx: [result, next_ctx]
      else: result



unfold = fn next_item_fn:
  next_fn = fn prev, ctx:
    item = next_item_fn prev, _, ctx
    next_iter = _iterable_ next_fn, item
    [item, next_iter, ctx]

  fn start: _iterable_ next_fn, start


unfold_ac = fn next_item_fn:
  next_fn = fn [prev, acc], ctx:
    [item, next_acc, next_ctx=ctx] = next_item_fn prev, acc, ctx
    next_iter = _iterable_ next_fn, [item, next_acc]
    [item, next_iter, next_ctx]

  fn start: _iterable_ next_fn, [start]



filter = fn filter_fn:
  next_fn = fn iterable, ctx:
    [item, rest, next_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [item, rest, next_ctx]
      else:
        keep = filter_fn item, , next_ctx
        match keep:
          true:
            next_iter = _iterable_ next_fn, rest
            [item, next_iter, next_ctx]
          else:
            next_fn rest, next_ctx

  fn items: _iterable_ next_fn, _iter_ items


filter_ac = fn filter_fn:
  next_fn = fn [iterable, acc], ctx:
    [item, rest, m_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [item, rest, m_ctx]
      else:
        [keep, next_acc, next_ctx] = filter_fn item, acc, m_ctx
        match keep:
          true:
            next_iter = _iterable_ next_fn, [rest, next_acc]
            [item, next_iter, next_ctx]
          else:
            next_fn [rest, next_acc], next_ctx

  fn items: _iterable_ next_fn, [_iter_ items]




while = fn while_fn:
  next_fn = fn iterable, ctx:
    [item, rest, next_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [item, rest, next_ctx]
      else:
        continue = while_fn item, , next_ctx
        match continue:
          true:
            next_iter = _iterable_ next_fn, rest
            [item, next_iter, next_ctx]
          else:
            [ , _empty_iter_, next_ctx]

  fn items: _iterable_ next_fn, _iter_ items


while_ac = fn while_fn:
  next_fn = fn [iterable, acc], ctx:
    [item, rest, m_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [item, rest, m_ctx]
      else:
        [continue, next_acc, next_ctx] = while_fn item, acc, m_ctx
        match continue:
          true:
            next_iter = _iterable_ next_fn, [rest, next_acc]
            [item, next_iter, next_ctx]
          else:
            [ , _empty_iter_, next_ctx]

  fn items: _iterable_ next_fn, [_iter_ items]



map = fn map_fn:
  next_fn = fn iterable, ctx:
    [item, rest, next_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [item, rest, next_ctx]
      else:
        mapped_item = map_fn item, , next_ctx
        next_iter = _iterable_ next_fn, rest
        [mapped_item, next_iter, next_ctx]

  fn items: _iterable_ next_fn, _iter_ items


map_ac = fn map_fn:
  next_fn = fn [iterable, acc], ctx:
    [item, rest, m_ctx=ctx] = _next_ iterable, ctx
    match rest:
      _is_done_ ?: [item, rest, m_ctx]
      else:
        [mitem, next_acc, next_ctx] = map_fn item, acc, m_ctx
        next_iter = _iterable_ next_fn, [rest, next_acc]
        [mitem, next_iter, next_ctx]

  fn items: _iterable_ next_fn, [_iter_ items]



chain = fn ...iterables: fn iterable:
  done = {}
  next_fn = fn [curr=done, ...rest_iters], ctx:
    match curr:
      done:
        [ , _empty_iter_, ctx]
      else:
        curr_iter = _iter_ curr
        [item, rest_curr, next_ctx=ctx] = _next_ curr_iter, ctx
        match rest_curr:
          _is_done_ ?:
            next_fn rest_iters, next_ctx
          else:
            next_iter = _iterable_ next_fn, [rest_curr, ...rest_iters]
            [item, next_iter, next_ctx]

  _iterable_ next_fn, [iterable, ...iterables]



flatten = fn iterables:
  next_fn = fn iters, ctx:
    [seq, rest_iters, seq_ctx=ctx] = _next_ iters, ctx
    pipe seq:
      chain flatten rest_iters
      _next_ ?, seq_ctx

  _iterable_ next_fn, _iter_ iterables



drop = fn num_items:
  filter_ac fn , idx=0:
    [idx >= num_items, idx + 1]



drop_last = fn num_items: fn iterable:
  pipe iterable:
    map_ac fn item, buffer=[]:
      match buffer:
        num_items > length ?:
          [[], [...buffer, item]]
        else:
          [out, ...rest] = buffer
          [[out], [...rest, item]]
    flatten



take = fn num_items: fn iterable:
  match num_items:
    0: []
    else:
      iterable | while_ac fn , ctr=1:
        [ctr <= num_items, ctr + 1]



take_last = fn num_items: fn iterable:
  last = {}

  pipe iterable:
    chain [last]
    map_ac fn item, buffer=[]:
      match item:
        last:
          [buffer, []]
        else:
          match buffer:
            num_items > length ?:
              [[], [...buffer, item]]
            else:
              [, ...rest] = buffer
              [[], [...rest, item]]
    flatten



slice = fn start, end=max_int: fn iterable:
  match true:
    end - start == 0:
      []

    start < 0 and end < 0:
      pipe iterable:
        take_last -start
        drop_last -end

    start < 0:
      pipe iterable:
        take_last -start
        take end + start

    end < 0:
      pipe iterable:
        drop start
        drop_last -end

    else:
      pipe iterable:
        drop start
        take end - start



repeat = fn repititions: fn item:
  pipe:
    unfold fn: item
    take repititions



count = fn start, step=1:
  pipe start - step:
    unfold fn value:
      value + step



range = fn start, end, step=1:
  [true_start, true_end] = match end:
    {}: [start, end]
    else: [0, start]

  pipe true_start - step:
    unfold fn cntr:
      cntr + step
    while fn cntr:
      cntr < true_end



equals = fn it1, it2:
  match length it1:
    ? != length it2:
      false
    else:
      [eq=true] = pipe zip it1, it2:
        map fn [item1, item2]: item1 == item2
        filter fn found: not found
      eq



enumerate = fn start=0, step=1:
  map_ac fn item, cntr=start:
    [[cntr, item], cntr + step]



cycle = fn items:
  pipe items:
    unfold fn items: items
    flatten



unique = filter_ac fn item, known=[]:
  [not item in known, [...known, item]]



insert_at = fn idx, items: fn iterable:
  ignore = {}

  pipe iterable:
    chain [ignore]

    map_ac fn item, curr=0:
      all = match curr:
        idx: items | chain [item]
        else: [item]
      [all, curr + 1]

    flatten

    filter fn item:
      item != ignore



find_index = fn item_to_find: fn iterable:
  [[, idx]] = pipe iterable:
    map_ac fn item, idx=0:
      [[item, idx], idx + 1]

    chain [[item_to_find, -1]]

    filter fn [item]:
      match item_to_find:
        is_fn ?: item_to_find item
        item: true
        else: false
  idx



item_at = fn idx: fn iterable:
  [item] = iterable | filter_ac fn , curr_idx=0:
    [idx == curr_idx, curr_idx + 1]
  item



select = fn indices: fn iterable:
  indices | map fn idx:
    iterable | item_at idx



compress = fn selectors: fn iterable:
  pipe zip iterable, selectors:
    filter fn [, selected]: selected
    map fn [item]: item



product = fn ...iterables:
  [iterable, ...rest] = iterables

  match rest:
    0 == length ?:
      iterable | map fn item: [item]
    else:
      # [...pools] = rest | map fn items: [...items]
      pipe iterable:
        map fn item:
          todo = pipe rest:
            product ...? # ...pools:
            map fn items:
              [item, ...items]
          todo
        flatten



permutations = fn len: fn [...iterable]:
  pool_len = length iterable
  expected_len = match len:
    {}: len
    else: pool_len

  idx_range = range pool_len

  pipe idx_range:
    repeat expected_len
    product ...?
    map fn indices:
      match unique indices:
        expected_len == length ?:
          [[... iterable | select indices]]
        else:
          []
    flatten



combinations = fn len: fn [...iterable]:
  pool_len = length iterable
  idx_range = range pool_len

  pipe idx_range:
    permutations len
    map fn indices:
      match indices:
        equals ?, indices | sort _:
          [[... iterable | select indices]]
        else:
          []
    flatten



pairs = fn iterable:
  pipe iterable:
    map_ac fn item, last=0:
      [[last, item], item]
    drop 1



chunks = fn len, fill: fn iterable:
  fill_items = fill | repeat len - 1

  pipe iterable:
    chain fill_items
    map_ac fn item, group=[]:
      items = [...group, item]

      match items:
        len == length ?:
          [[items], []]
        else:
          [[], items]

    flatten


