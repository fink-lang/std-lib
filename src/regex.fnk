{raw} = import './str'


regex = fn pattern, flags='':
  new RegExp pattern, 'u${flags}'


---
Create a regex for the given raw string.

e.g.
```
reg = rx'
  (?<year>\d{4})-    # year part of a date
  (?<month>\d{2})-   # month part of a date
  (?<day>\d{2})      # day part of a date
'
```
---
rx = fn strings, ...exprs:
  # implement in loxia or larix for optimization
  ingorables = regex raw'(\s+#.*\n)|(\n\s*)'
  esc = regex raw`(^|[^\\])((\\{2})*)\\(?=[#'"${'`'}'])`

  [...parts] = pipe strings.raw:
    map part:
      pipe part:
        replace_all ?, ingorables, ''
        replace_all ?, esc, '$1$3'

  regex raw {raw: parts}, ...exprs


match_all = fn str, rx:
  str.matchAll regex rx, 'g'


find_index = fn str, rx:
  str.search rx


split = fn str, rx, ...args:
  str.split rx, ...args


replace = fn str, rx, replacement:
  str.replace rx, replacement


replace_all = fn str, rx, replacement:
  rxg = regex rx, 'g'
  str.replace rxg, replacement


matches = fn str, rx: rx.test str
