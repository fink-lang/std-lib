{describe, it, expect, to_equal, mock_fn, was_called, was_not_called, run_all_timers} = import '@fink/jest/test.fnk'

{parallel, sequential, sleep, is_async} = import './async.fnk'


run_task = fn name, handler:
  await handler '${name} start'
  await handler '${name} end'


describe 'async', fn:
  it 'waits for tasks in parallel', fn:
    handler = mock_fn _

    await pipe 'abc':
      map item: run_task item, handler
      parallel

    expect
      handler.mock.calls
      to_equal list:
        ['a start']
        ['b start']
        ['c start']
        ['a end']
        ['b end']
        ['c end']



  it 'pulls tasks sequentially', fn:
    handler = mock_fn _

    await pipe 'abc':
      map item: run_task item, handler
      sequential

    expect
      handler.mock.calls
      to_equal list:
        ['a start']
        ['a end']
        ['b start']
        ['b end']
        ['c start']
        ['c end']


  it 'sleeps', fn:
    handler = mock_fn _

    pipe:
      fn:
        await sleep 1000
        handler _

    expect
      handler
      was_not_called

    await run_all_timers _

    expect
      handler
      was_called



describe 'reflective', fn:
  it 'is_async', fn:
    expect
      is_async sleep 123
      to_equal true

    expect
      is_async 1234
      to_equal false
