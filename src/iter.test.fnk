{describe, it, expect, to_equal, skip} = import '@fink/jest/test.fnk'

{
  repeat, count, enumerate, zip, cycle, chain, reverse, sort, unique, flatten
  length, is_empty, join, slice, insert_at, take, drop, compress
  find_index, is_iter, product, permutations, combinations, equals, pairs
  chunks, range, drop_last, take_last
} = import './iter.fnk'

{pad_start} = import './str.fnk'



expect_iter = fn actual, expectation:
  expect
    [... actual]
    expectation




describe repeat, fn:
  it 'repeats item n times', fn:
    expect_iter
      '.' | repeat 3
      to_equal
        ['.', '.', '.']



describe count, fn:
  it 'counts', fn:
    [a, b, c] = count 0, 2
    expect
      [a, b, c]
      to_equal
        [0, 2, 4]

  it 'counts with steps', fn:
    [a, b, c] = count 0, 2
    expect
      [a, b, c]
      to_equal
        [0, 2, 4]



describe range, fn:
  it 'create range up to end', fn:
    expect_iter
      range 3
      to_equal
        [0, 1, 2]

  it 'create range from start to up to end', fn:
    expect_iter
      range 1, 5
      to_equal
        [1, 2, 3, 4]

  it 'create range from start to up to end with given increments', fn:
    expect_iter
      range 1, 9, 2
      to_equal
        [1, 3, 5, 7]



describe enumerate, fn:
  it 'enumerates', fn:
    expect_iter
      'abc' | enumerate _
      to_equal list:
        [0, 'a']
        [1, 'b']
        [2, 'c']


  it 'enumerates with start and step', fn:
    expect_iter
      'abc' | enumerate 0, -1
      to_equal list:
        [0, 'a']
        [-1, 'b']
        [-2, 'c']



describe zip, fn:
  it 'zips iterables into one', fn:
    items = zip 'abc', count 1

    expect_iter
      items
      to_equal list:
        ['a', 1]
        ['b', 2]
        ['c', 3]

    expect_iter
      items
      to_equal list:
        ['a', 1]
        ['b', 2]
        ['c', 3]



describe cycle, fn:
  it 'cycles', fn:
    [a, b, c, d, e] = cycle [1, 2, 3]

    expect
      [a, b, c, d, e]
      to_equal
        [1, 2, 3, 1, 2]



describe chain, fn:
  it 'chains multiple iterables', fn:
    expect_iter
      'abc' | chain [1, 2, 3]
      to_equal
        ['a', 'b', 'c', 1, 2, 3]



describe insert_at, fn:

  it 'inserts items into iterable', fn:
    expect
      pipe '123456':
        insert_at 3, 'abc'
        join ''
      to_equal
        '123abc456'

    expect
      pipe '1':
        insert_at 0, 'abc'
        join ''
      to_equal
        'abc1'

    expect
      pipe '1':
        insert_at 1, 'abc'
        join ''
      to_equal
        '1abc'



describe unique, fn:
  it 'creates unique set of items', fn:
    expect_iter
      [1, 2, 3] | unique
      to_equal
        [1, 2, 3]

    expect_iter
      [1, 2, 2, 3] | unique
      to_equal
        [1, 2, 3]



describe flatten, fn:
  it 'flattens nested iterable', fn:
    expect_iter
      pipe 'abc':
        enumerate _
        flatten
      to_equal
        [0, 'a', 1, 'b', 2, 'c']



describe reverse, fn:
  it 'reverses iterable', fn:
    expect_iter
      [1, 2, 3] | reverse
      to_equal
        [3, 2, 1]



describe sort, fn:
  it 'sorts iterable', fn:
    expect_iter
      pipe ['1', '222', '2', '11']:
        sort fn a, b:
          padded_a = pad_start a, 10, ' '
          padded_b = pad_start b, 10, ' '
          match padded_a:
            ? == padded_b: 0
            ? > padded_b: 1
            else: -1

      to_equal
        ['1', '2', '11', '222']



describe compress, fn:
  it 'compresses items', fn:
    expect_iter
      [1, 2, 3, 4] | compress [true, false, false, true]
      to_equal
        [1, 4]



describe product, fn:
  it 'creates a product from single iterable', fn:
    expect_iter
      product '123'
      to_equal
        [['1'], ['2'], ['3']]


  it 'creates a product from multiple iterables', fn:
    expect_iter
      product '123', 'abc'
      to_equal
        list:
          ['1', 'a'], ['1', 'b'], ['1', 'c']
          ['2', 'a'], ['2', 'b'], ['2', 'c']
          ['3', 'a'], ['3', 'b'], ['3', 'c']

    expect_iter
      pipe product '123', 'abc', '.•˚':
        map items: items | join ''
      to_equal
        list:
          '1a.', '1a•', '1a˚'
          '1b.', '1b•', '1b˚'
          '1c.', '1c•', '1c˚'
          '2a.', '2a•', '2a˚'
          '2b.', '2b•', '2b˚'
          '2c.', '2c•', '2c˚'
          '3a.', '3a•', '3a˚'
          '3b.', '3b•', '3b˚'
          '3c.', '3c•', '3c˚'



describe permutations, fn:
  it 'creates permutations', fn:
    expect_iter
      pipe 'abcd':
        permutations _
        map items: items | join ''
      to_equal
        list:
          'abcd', 'abdc', 'acbd', 'acdb', 'adbc', 'adcb'
          'bacd', 'badc', 'bcad', 'bcda', 'bdac', 'bdca'
          'cabd', 'cadb', 'cbad', 'cbda', 'cdab', 'cdba'
          'dabc', 'dacb', 'dbac', 'dbca', 'dcab', 'dcba'

    expect_iter
      pipe 'abcd':
        permutations 2
        map items: items | join ''
      to_equal
        ['ab', 'ac', 'ad', 'ba', 'bc', 'bd', 'ca', 'cb', 'cd', 'da', 'db', 'dc']



describe combinations, fn:
  it 'creates combinations', fn:
    expect_iter
      pipe 'abcd':
        combinations 1
        map items: items | join ''
      to_equal
        ['a', 'b', 'c', 'd']

    expect_iter
      pipe 'abcd':
        combinations 2
        map items: items | join ''
      to_equal
        ['ab', 'ac', 'ad', 'bc', 'bd', 'cd']

    expect_iter
      pipe 'abcd':
        combinations 3
        map items: items | join ''
      to_equal
        ['abc', 'abd', 'acd', 'bcd']

    expect_iter
      pipe 'abcd':
        combinations 4
        map items: items | join ''
      to_equal
        ['abcd']



describe pairs, fn:
  it 'creates pairs', fn:
    expect_iter
      pipe pairs 'ab':
        map items: items | join ''
      to_equal
        ['ab']

    expect_iter
      pipe pairs 'abc':
        map items: items | join ''
      to_equal
        ['ab', 'bc']

    expect_iter
      pipe pairs 'abcd':
        map items: items | join ''
      to_equal
        ['ab', 'bc', 'cd']



describe chunks, fn:
  it 'creates chunks', fn:
    expect_iter
      pipe '0123456789':
        chunks 3
        map items: items | join ''
      to_equal
        ['012', '345', '678', '9']

    expect_iter
      pipe '0123':
        chunks 2
        map items: items | join ''
      to_equal
        ['01', '23']

    expect_iter
      pipe '0123':
        chunks 3, 'x'
        map items: items | join ''
      to_equal
        ['012', '3xx']



describe drop, fn:
  it 'ignores n elements', fn:
    expect
      pipe '1234567890':
        drop 5
        join ''
      to_equal '67890'



describe drop_last, fn:
  it 'ignores last n elements', fn:
    expect
      pipe '1234567890':
        drop_last 5
        join ''
      to_equal '12345'

    expect
      pipe '12345':
        drop_last 5
        join ''
      to_equal ''



describe take, fn:
  it 'filters n elements', fn:
    expect
      pipe '1234567890':
        take 5
        join ''
      to_equal '12345'

    expect
      pipe '1234567890':
        take 0
        join ''
      to_equal ''



describe take_last, fn:
  it 'ignores last n elements', fn:
    expect
      pipe '1234567890':
        take_last 5
        join ''
      to_equal '67890'

    expect
      pipe '123':
        take_last 5
        join ''
      to_equal '123'




describe slice, fn:
  it 'takes 0 length slice', fn:
    expect_iter
      pipe count 0:
        slice 1, 1
      to_equal
        []


  it 'takes regular slice', fn:
    expect_iter
      pipe count 0:
        slice 0, 3
      to_equal
        [0, 1, 2]


  it 'takes slice from start to end of iterable', fn:
    expect_iter
      pipe '0123456789':
        slice 5
      to_equal
        [...'56789']


  it 'takes end-offset slice', fn:
    expect_iter
      pipe '0123456789':
        slice 3, -2
      to_equal
        [...'34567']

    expect_iter
      pipe '0123456789':
        slice 7, -5
      to_equal
        [...'']

    expect_iter
      pipe '0123456789':
        slice -5, 8
      to_equal
        [...'567']

    expect_iter
      pipe '0123456789':
        slice -5, -1
      to_equal
        [...'5678']

    expect_iter
      pipe '0123456789':
        slice -5, -6
      to_equal
        [...'']



describe length, fn:
  it 'gets length', fn:
    expect
      length '1234'
      to_equal 4

    expect
      length []
      to_equal 0

    expect
      length  [1, 2, 2] | unique
      to_equal 2

    expect
      length 'abc' | chain 'def'
      to_equal 6

    expect
      length {}
      to_equal 0



describe is_empty, fn:
  it 'checks if iterable is empty', fn:
    expect
      is_empty ''
      to_equal true

    expect
      is_empty []
      to_equal true

    expect
      is_empty 'foo'
      to_equal false

    expect
      is_empty [1]
      to_equal false

    expect
      is_empty count 1
      to_equal false

    expect
      is_empty unique '123456'
      to_equal false

    expect
      is_empty {}
      to_equal true

    expect
      is_empty range 0
      to_equal true



describe join, fn:
  it 'joins iterables with a separator', fn:
    expect
      pipe 'abc':
        chain 'def'
        join ','

      to_equal
        'a,b,c,d,e,f'



describe find_index, fn:
  it 'finds index of elem', fn:
    expect
      pipe [1, 2, 3]:
        find_index 2
      to_equal 1

    expect
      pipe [1, 2, 3]:
        find_index 0
      to_equal -1

    expect
      pipe [1, 2, 3]:
        find_index fn item: item == 2
      to_equal 1



skip.describe is_iter, fn:
  it 'is_iter', fn:
    expect
      is_iter []
      to_equal true

    expect
      is_iter ''
      to_equal true

    expect
      is_iter (unfold: 1) _
      to_equal true

    expect
      is_iter 123
      to_equal false



describe equals, fn:
  it 'checks if iterables are equal', fn:
    expect
      equals 'abc', 'abc'
      to_equal true

    expect
      equals 'abc', 'def'
      to_equal false

    expect
      equals 'abc', 'ab'
      to_equal false



describe 'performance', fn:

  it 'performs', fn:
    t1 = fn:
      pipe 0:
        unfold start=0: start + 1
        until x: x == 1000
        map item: [item, {reps: [...item | repeat 5], r: [...range 0, 10, 2]}]
        zip ?, count 1000
        map [item, cntr]: {cntr, item}
        filter {cntr}: cntr % 2 == 0
        fold _, c=0: c+1

    t2 = fn:
      pipe range 100:
        fold:
          t1 _

    expect
      t2 _
      to_equal 500

