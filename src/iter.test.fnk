{describe, it, expect, to_equal} = import '@fink/jest'

{
  repeat, count, enumerate, zip, cycle, chain, reverse, sort, unique, flatten
  length, is_empty, join, slice, insert_at, take, drop, compress,
  find_index
} = import './iter'

{pad_start} = import './str'



describe 'iter - generating funcs', fn:
  it 'repeats item forever', fn:
    [a, b, c] = repeat '.'

    expect
      [a, b, c]
      to_equal
        ['.', '.', '.']

  it 'counts', fn:
    [a, b, c] = count 0, 2
    expect
      [a, b, c]
      to_equal
        [0, 2, 4]


describe 'iter - transforming funcs', fn:
  it 'enumerates', fn:
    expect
      [...enumerate 'abc']
      to_equal list:
        [0, 'a']
        [1, 'b']
        [2, 'c']

    expect
      [...enumerate 'abc', 0, -1]
      to_equal list:
        [0, 'a']
        [-1, 'b']
        [-2, 'c']


  it 'zips iterables into one', fn:
    expect
      [...zip 'abc', count 1]
      to_equal list:
        ['a', 1]
        ['b', 2]
        ['c', 3]


  it 'cycles', fn:
    [a, b, c, d, e] = cycle [1, 2, 3]

    expect
      [a, b, c, d, e]
      to_equal
        [1, 2, 3, 1, 2]


  it 'chains multiple iterables', fn:
    expect
      [...chain 'abc', [1, 2, 3]]
      to_equal
        ['a', 'b', 'c', 1, 2, 3]


  it 'inserts items into iterable', fn:
    expect
      pipe '123456':
        insert_at 3, 'abc'
        join ''
      to_equal
        '123abc456'

    expect
      pipe '1':
        insert_at 0, 'abc'
        join ''
      to_equal
        'abc1'

    expect
      pipe '1':
        insert_at 1, 'abc'
        join ''
      to_equal
        '1abc'


  it 'creates unique set of items', fn:
    expect
      pipe [1, 2, 2, 3]:
        unique
        [...?]
      to_equal
        [1, 2, 3]


  it 'flattens nested iterable', fn:
    expect
      [...flatten enumerate 'abc']
      to_equal
        [0, 'a', 1, 'b', 2, 'c']


  it 'reverses iterable', fn:
    expect
      reverse [1, 2, 3]
      to_equal
        [3, 2, 1]


  it 'sorts iterable', fn:
    expect
      pipe ['1', '222', '2', '11']:
        sort fn a, b:
          padded_a = pad_start a, 10, ' '
          padded_b = pad_start b, 10, ' '
          match padded_a:
            ? == padded_b: 0
            ? > padded_b: 1
            else: -1

      to_equal
        ['1', '2', '11', '222']


  it 'compresses items', fn:
    expect
      pipe [1, 2, 3, 4]:
        compress ?, [true, false, false, true]
        [...?]
      to_equal
        [1, 4]



describe 'slice', fn:
  it 'advances ignores n elements', fn:
    expect
      pipe '1234567890':
        drop 5
        join ''
      to_equal '67890'


  it 'filters n elements', fn:
    expect
      pipe '1234567890':
        take 5
        join ''
      to_equal '12345'


  it 'takes 0 length slice', fn:
    expect
      pipe count 0:
        slice 1, 1
        [...?]
      to_equal
        []


  it 'takes regular slice', fn:
    expect
      pipe count 0:
        slice 0, 3
        [...?]
      to_equal
        [0, 1, 2]


  it 'takes slice from start to end of iterable', fn:
    expect
      pipe '0123456789':
        slice 5
        [...?]
      to_equal
        [...'56789']


  it 'takes end-offset slice', fn:
    expect
      pipe '0123456789':
        slice 0, -5
        [...?]
      to_equal
        [...'01234']

    expect
      pipe '0123456789':
        slice -5, -1
        [...?]
      to_equal
        [...'5678']



describe 'folding funcs', fn:
  it 'gets length', fn:
    expect
      length '1234'
      to_equal 4

    expect
      length []
      to_equal 0

    expect
      length pipe [1, 2, 2]: unique
      to_equal 2

    expect
      length chain 'abc', 'def'
      to_equal 6

    expect
      length {}
      to_equal (-1)


  it 'checks if iterable is empty', fn:
    expect
      is_empty ''
      to_equal true

    expect
      is_empty []
      to_equal true

    expect
      is_empty 'foo'
      to_equal false

    expect
      is_empty [1]
      to_equal false


  it 'joins iterables with a separator', fn:
    expect
      pipe chain 'abc', 'def':
        join ','

      to_equal
        'a,b,c,d,e,f'


  it 'finds index of elem', fn:
    expect
      pipe [1,2,3]:
        find_index 2
      to_equal 1

    expect
      pipe [1,2,3]:
        find_index 0
      to_equal -1